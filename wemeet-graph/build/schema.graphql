# // required field has a “!” (the value can’t be null) .

# type AttendeeConfirmed @entity(immutable: true) {
#   id: Bytes!
#   eventId: Bytes! # bytes32
#   registrantAddress: Bytes! # address
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type NewEventCreated @entity(immutable: true) {
#   id: Bytes!
#   eventId: Bytes! # bytes32
#   creatorAddress: Bytes! # address
#   eventStartTimestamp: BigInt! # uint256
#   eventEndTimestamp: BigInt! # uint256
#   maxCapacity: BigInt! # uint256
#   deposit: BigInt! # uint256
#   eventDataCID: String! # string
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type NewRSVPcreated @entity(immutable: true) {
#   id: Bytes!
#   eventId: Bytes! # bytes32
#   registrantAddress: Bytes! # address
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type UnclaimedDepositsWithdrawn @entity(immutable: true) {
#   id: Bytes!
#   eventID: Bytes! # bytes32
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

type Event @entity {
  id: ID!
  eventId: Bytes
  name: String
  description: String
  link: String
  imageUrl: String
  eventOwner: Bytes!
  eventStartTimestamp: BigInt!
  eventEndTimestamp: BigInt!
  maxCapacity: BigInt!
  deposit: BigInt!
  refundPaidOut: Boolean!
  totalRSVPs: BigInt!

  totalConfirmedAttendees: BigInt!
  rsvps: [RSVP!] @derivedFrom(field: "event")
  confirmedRSVPs: [Confirmation!] @derivedFrom(field: "event")
}

type Account @entity {
  id: ID!
  totalRSVPs: BigInt!
  totalAttendedEvent: BigInt!
  rsvps: [RSVP!] @derivedFrom(field: "attendee")
  attendedEvents: [Confirmation!] @derivedFrom(field: "attendee")
}

type RSVP @entity {
  id: ID!
  attendee: Account!
  event: Event!
}

type Confirmation @entity {
  id: ID!
  attendee: Account!
  event: Event!
}
